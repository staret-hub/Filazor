@page "/main"

@using System.IO
@using Filazor.Core.Data
@using Filazor.Core.Pages.Controls

@inject FileSystemService FSService


<style>

    /* Remove default bullets */
    ul, #FSTreeView {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    /* Remove margins and padding from the parent ul */
    #FSTreeView {
        margin: 0;
        padding: 0;
    }

    li {
        cursor: pointer;
        /* Prevent text selection */
        user-select: none; /* standard syntax */
        -webkit-user-select: none; /* webkit (safari, chrome) browsers */
        -moz-user-select: none; /* mozilla browsers */
        -khtml-user-select: none; /* webkit (konqueror) browsers */
        -ms-user-select: none; /* IE10+ */
    }

        li > span:hover {
            background-color: aliceblue;
            outline: 1px solid;
            outline-color: deepskyblue;
        }

        li > span {
            padding-left: 5px;
        }

        li li > span {
            padding-left: 15px;
        }

        li li li > span {
            padding-left: 35px;
        }

        li li li li > span {
            padding-left: 50px;
        }

        li li li li li > span {
            padding-left: 65px;
        }

        li li li li li li > span {
            padding-left: 80px;
        }

        li li li li li li li > span {
            padding-left: 95px;
        }

        li li li li li li li li > span {
            padding-left: 110px;
        }

        li li li li li li li li li > span {
            padding-left: 125px;
        }

        li li li li li li li li li li > span {
            padding-left: 140px;
        }

        li li li li li li li li li li li > span {
            padding-left: 155px;
        }

        li li li li li li li li li li li li > span {
            padding-left: 170px;
        }

        li li li li li li li li li li li li li > span {
            padding-left: 185px;
        }

        li li li li li li li li li li li li li li > span {
            padding-left: 200px;
        }

        li li li li li li li li li li li li li li li > span {
            padding-left: 215px;
        }

        li li li li li li li li li li li li li li li li > span {
            padding-left: 230px;
        }

    /* Style the caret/arrow */
    .caret {
        cursor: pointer;
        user-select: none; /* Prevent text selection */
    }

    /* Create the caret/arrow with a unicode, and style it */
    .caret::before {
        content: "\276F";
        color: darkgray;
        display: inline-block;
        margin-right: 3px;
    }

    /* Rotate the caret/arrow icon when clicked on (using JavaScript) */
    .caret-down::before {
        transform: rotate(90deg);
        color: black;
    }

    /* Hide the nested list */
    .nested {
        display: none;
    }

    /* Show the nested list when the user clicks on the caret/arrow (with JavaScript) */
    .active {
        display: block;
    }

    .item-selected {
        background-color: aliceblue;
    }


</style>

@if (string.IsNullOrEmpty(hostName))
{
    <Loader />
}
else
{
    <div class="container-fluid h-100 d-flex flex-column">
        <div class="row border">
            <div class="col px-1">
                <p class="text-center mb-0 py-1" style="color: dimgray"><strong>File Explorer</strong></p>
            </div>
        </div>

        <div class="row align-items-center border">
            <div class="col-2 px-1">
                <Navigator HostName="@hostName" 
                           SelectedDirectory="@addressbarCurrentPath"
                           SelectedCallback="MoveTo" />
            </div>
            <div class="col-7 px-1">
                <AddressBar HostName="@hostName" CurrentPath="@addressbarCurrentPath" AddressChangedCallback="MoveTo" />
            </div>
            <div class="col-3 px-1">
                @*<SearchBox />*@
            </div>
            @*<div class="col-1 px-1">
                    <UploadDownloadControl UploadDirectory="@addressbarCurrentPath" />
                </div>*@
        </div>

        <div class="row h-100">
            <div class="col-3 px-1 py-1 border" style="height: calc(100vh - 140px); overflow: auto;">
                <ul id="FSTreeView">
                    <li>
                        <span class="@selectedItem" style="display: block;" @onclick="SelectedHost" @ondblclick="ExpandHost">
                            <span class="caret @caretDirection" @onclick="ExpandHost" />
                            <i class="material-icons align-middle" style="font-size: 18px; color: dimgrey;">
                                desktop_windows
                            </i>
                            <small>@hostName</small>
                        </span>
                        @if (driveInfos != null)
                        {
                            <ul class="nested @isActive">
                                @foreach (var driveInfo in driveInfos)
                                {
                                    <li>
                                        <FSTreeNode IsDrive=true
                                                    DriveVolumeLabel=@driveInfo.VolumeLabel
                                                    TargetRootDirectoryInfo=@driveInfo.RootDirectory
                                                    OnClickCallback="@DriveNodeCallback" />
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                </ul>
            </div>
            <div class="col-9 px-1 py-0 border" style="height: calc(100vh - 140px); overflow: auto;">
                @if (string.IsNullOrEmpty(addressbarCurrentPath))
                {
                    <DriveDetailView DriveInfos="@driveInfos" SelectedDirectoryCallback="SelectedDirectory" />
                }
                else
                {
                    <FileDetailViewTable TargetRootDirectoryInfo="@lastSelectedDirInfo" 
                                         SelectedDirectoryCallback="SelectedDirectory"
                                         ChangedItemCountCallback="ChangedItemCount"/>
                }
            </div>
        </div>
        <div class="row px-0 py-0 align-items-center border" style="height: 40px">
            <div class="col-12">
                <small></small>
            </div>
        </div>
    </div>
}


@code {
    private string hostName;
    private DriveInfo[] driveInfos;

    private string caretDirection;
    private string selectedItem;
    private string isActive;

    private FSTreeNode lastSelectedNode;    // for Directory Node Default Style
    private DirectoryInfo lastSelectedDirInfo; // for FileDetailViewTable
    private int itemCount;


    private string addressbarCurrentPath;


    protected override async Task OnInitializedAsync()
    {
        hostName = await FSService.GetHostName();
        driveInfos = await FSService.GetDriveListAsync();

        // set default
        if (driveInfos != null && driveInfos.Length > 0)
        {
            UpdateUIForHost();
        }
    }

    /// <summary>
    /// Host node click event
    /// </summary>
    private void SelectedHost()
    {
        UpdateUIForHost();
    }

    private void UpdateUIForHost()
    {
        if (lastSelectedNode != null)
        {
            lastSelectedNode.SetDefaultStyle();
            lastSelectedNode = null;
        }

        selectedItem = "item-selected";
        addressbarCurrentPath = string.Empty;
        lastSelectedDirInfo = null;
        ChangedItemCount(driveInfos.Length);
    }

    /// <summary>
    /// Expand Host Event: Show all drives
    /// </summary>
    private async void ExpandHost()
    {
        driveInfos = await FSService.GetDriveListAsync();

        caretDirection = string.IsNullOrEmpty(caretDirection) ? "caret-down" : "";
        isActive = string.IsNullOrEmpty(isActive) ? "active" : "";
        selectedItem = "item-selected";
        ChangedItemCount(driveInfos.Length);

        await InvokeAsync(() => { this.StateHasChanged(); });
    }

    /// <summary>
    /// Drive Node Click EventCallback
    /// </summary>
    /// <param name="args">Event Node</param>
    private void DriveNodeCallback(FSTreeNode args)
    {
        if (lastSelectedNode == null)
        {
            selectedItem = null;
        }
        else
        {
            lastSelectedNode.SetDefaultStyle();
        }

        lastSelectedNode = args;
        lastSelectedDirInfo = args.TargetRootDirectoryInfo;
        addressbarCurrentPath = lastSelectedDirInfo.FullName;
    }

    /// <summary>
    /// move to selected directory
    /// using AddressBar / DriveDetailView / FileDetailViewTable
    /// </summary>
    /// <param name="selectedDirInfo">Selected DirectoryInfo</param>
    private void SelectedDirectory(DirectoryInfo selectedDirInfo)
    {
        lastSelectedDirInfo = selectedDirInfo;
        addressbarCurrentPath = lastSelectedDirInfo.FullName;
    }

    private void ChangedItemCount(int count)
    {
        Console.WriteLine("Count {0}", count);
        //itemCount = count;
    }

    private void MoveTo(string path)
    {
        if (string.IsNullOrEmpty(path))
        {
            UpdateUIForHost();
        }
        else
        {
            lastSelectedDirInfo = new DirectoryInfo(path);
            addressbarCurrentPath = lastSelectedDirInfo.FullName;
        }
    }

}

